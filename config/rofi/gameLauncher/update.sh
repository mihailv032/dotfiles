#!/bin/bash

#updates all the game entries and all the banners so it might take some time for the script to execute

cd $(dirname $(realpath $0))

scriptDir=$(dirname $(realpath $0))
STEAM_ROOT=$HOME/.local/share/Steam

CACHE_DIR=~/.cache/rofi-game-launcher/banners #banners dir
EXT=tiff
TITLE=$CACHE_DIR/title.png


ENTRIES=$HOME/.local/share/applications/steam
BANNER=$HOME/.config/rofi/gameLauncher/iconBanner

#create en etnry for update
desktop-entry() {
cat <<EOF
[Desktop Entry]
Name=$2
Exec=$scriptDir/game-splash-menu.sh $1
Icon=$3
Terminal=false
Type=Application
Categories=SteamLibrary;
EOF
}
rasiFile() {
cat <<EOF
@import "../launcher"
@import "../game-splash-menu.rasi"
window {
	height: 460;
	background-image: url("$1");
}

icon-banner {
    filename:                       "$1";
    expand:                         false;
}
icon-title {
    expand:                         false;
    filename:                       "$2";
	vertical-align:					0.5;
    size:                           600;
}

EOF
}
#the entry for updating
updEntry() {
cat <<EOF
[Desktop Entry]
Name=Update
Exec=$scriptDir/gl-wrapper.sh update
Icon=$scriptDir/update.jpg
Terminal=false
Type=Application
Categories=SteamLibrary;
EOF
}
#creates an entry for steam account switching
changeAC() {
cat <<EOF
[Desktop Entry]
Name=Steam
Exec=$scriptDir/ac.sh
Icon=$scriptDir/steam.jpg
Terminal=false
Type=Application
Categories=SteamLibrary;
EOF
}

# Fetch all Steam library folders.
steam-libraries() {
    echo "$STEAM_ROOT"
    # Additional library folders are recorded in libraryfolders.vdf
    libraryfolders=$STEAM_ROOT/steamapps/libraryfolders.vdf
    # Match directories listed in libraryfolders.vdf (or at least all strings
    # that look like directories)
    grep -oP "(?<=\")/.*(?=\")" $libraryfolders
}

#gets the width only of the widest monitor
get-display-width() {
    xrandr | grep -e " connected " \
           | grep -oP "[[:digit:]]+(?=x[[:digit:]]+)" \
           | sort -nr | head -n 1
}

width="$(get-display-width)"
height=460 # This should match height in game-splash-menu.sh the rasiFile funciton description

#dir where all the entries will be stored
mkdir -p "$ENTRIES" 
mkdir -p "$BANNER"


updEntry > $HOME/.local/share/applications/steam/update.desktop
changeAC > $HOME/.local/share/applications/steam/steam.desktop

# Generate the contents of a .desktop file for a Steam game.
# Expects appid, title, and box art file to be given as arguments

#creates the entries
update-entries() {
    entry=$ENTRIES/${appid}.desktop

    echo -e "Generating $entry\t($title)"
    desktop-entry "$appid" "$title" "$boxart" > "$entry"
}

update-banner() {
    local blend=200
	local force=1

    local src=$STEAM_ROOT/appcache/librarycache/${appid}_library_hero.jpg
    local title=$STEAM_ROOT/appcache/librarycache/${appid}_logo.png
    local out=$CACHE_DIR/$appid/${width}x${height}.$EXT
	local rasi=~/.config/rofi/gameLauncher/iconBanner/

    mkdir -p $CACHE_DIR/$appid
	mkdir -p $CACHE_DIR
	mkdir -p $rasi

    if [ ! -f $out ] || [ ! -z $force ]; then
        # Banner image is generated by taking the hero image used by Steam
        # (typically 1920x620) and stretching and blurring the horizontal
        # edges to reach the desired width. The variable blend determines the
        # how much of the edges are used in this operation.
        local gradient=$CACHE_DIR/gradient.tiff
        local left=$CACHE_DIR/left.tiff
        local right=$CACHE_DIR/right.tiff
        local center=$CACHE_DIR/center.tiff


        convert $src -resize ${width}x${height} $center

        # Generate gradient image used for blending the side extensions into
        # the center image and for fading the side images
        magick -size ${height}x${blend} gradient: -rotate 90 $gradient

        local center_width=$(identify -format "%W" $center)
        local side_width=$(( (width - center_width + 1)/2 + blend ))
        local side_blend=$(( side_width/2 ))

        # Generate left extension
        convert $center -crop ${blend}x${height}+0+0 \
            -resize ${side_width}x${height}\! -blur 0x12 \
            -gravity east \( $gradient -rotate 180 \) \
            -compose copyopacity -composite \
            -gravity west \( $gradient -resize ${side_blend}x${height}\! \) \
            -compose copyopacity -composite \
            $left

        # Generate right extension
        convert $center -gravity east -crop ${blend}x${height}+0+0 \
            -resize ${side_width}x${height}\! -blur 0x12 \
            -gravity west $gradient \
            -compose copyopacity -composite \
            -gravity east \( $gradient -rotate 180 -resize ${side_blend}x${height}\! \) \
            -compose copyopacity -composite \
            $right

        # Blend the banner together
        convert \
            \( $center -background none -gravity center -extent ${width}x${height} \) \
            \( $left   -background none -gravity west   -extent ${width}x${height} \) \
            -compose over -composite \
            \( $right  -background none -gravity east   -extent ${width}x${height} \) \
            -compose over -composite \
            $out
        fi
		rasiFile "$out" "$title" > "$rasi/$appid.rasi" 
}

for library in $(steam-libraries); do
# All installed Steam games correspond with an appmanifest_<appid>.acf file
	if [ -z "$(shopt -s nullglob; echo "$library"/steamapps/appmanifest_*.acf)" ]; then
 		# Skip empty library folders
   		continue
	fi
    for manifest in "$library"/steamapps/appmanifest_*.acf; do
  		appid=$(basename "$manifest" | tr -dc "[0-9]")
    	title=$(awk -F\" '/"name"/ {print $4}' "$manifest" | tr -d "™®")
		boxart=$STEAM_ROOT/appcache/librarycache/${appid}_library_600x900.jpg

		echo "$appid"
		# Filter out non-game entries (e.g. Proton versions or soundtracks) by
		# checking for boxart and other criteria
		if [ ! -f "$boxart" ]; then
			echo "Skipping $title - no boxart"
			continue
		fi
		if echo "$title" | grep -qe "Soundtrack"; then
			echo "Skipping $title - soundtrack"
			continue
		fi
		update-banner 
		update-entries $title $boxart
	done
done

