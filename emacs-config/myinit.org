* General
** startuptime
#+BEGIN_SRC  emacs-lisp
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
    (format "%.2f seconds"
      (float-time
      (time-subtract after-init-time before-init-time)))
  gcs-done))
  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC
** packakge archives
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives
		  '("melpa" . "http://melpa.milkbox.net/packages/") t)
   #+END_SRC
** Disable the backup files and #files
    #+BEGIN_SRC emacs-lisp
      (setq auto-save-default nil)
      (setq create-lockfiles nil)
      (setq create-backup-files nil)
      (setq create-lockfiles nil)
      (setq make-backup-files nil)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (defun fontify-frame (frame)
       (set-frame-parameter frame 'font "monospace-16"))
     
   #+END_SRC
** add node modules path
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
  :ensure t)
#+END_SRC
** Recent Opened files
   #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (setq recentf-max-saved-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+END_SRC
** default working directory
   #+BEGIN_SRC emacs-lisp
     ;     (cd "~/prog/js")
   #+END_SRC
** show brakets pair
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
** make escape = C-g
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+END_SRC
** fontify
   #+BEGIN_SRC emacs-lisp
     (fontify-frame nil)
     (push 'fontify-frame after-make-frame-functions)
   #+END_SRC
** Path from sheel
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
	     :ensure t
	     :config
	     (exec-path-from-shell-initialize))
   #+END_SRC
** loadpath
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (add-to-list 'load-path "~/emacs.d/plugins/emmet-mode")
     (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
     (add-to-list 'load-path "~/.emacs.d/plugins/react-snippets.el")
     (add-to-list 'load-path "~/.emacs.d/plugins/emacs-prisma-mode")
     (add-to-list 'load-path "~/.emacs.d/plugins")
     (add-to-list 'load-path "~/.emacs.d/plugins/vendor/emacs-powerline")

   #+END_SRC

** follow symbolic link default to yes
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** misc
   #+BEGIN_SRC emacs-lisp
     (require 'bind-key)
     (delete-selection-mode t)
     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024))
     #+END_SRC

* straight 
  #+BEGIN_SRC emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+END_SRC
* Evil
** Evil mode
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t) 
      (setq evil-want-keybinding t)
      :config
      (evil-mode 1)
      (setq evil-undo-system 'undo-fu)
      (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state))
  #+END_SRC
** Evil collection
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
	:after evil
        :ensure t 
	:custom (evil-collection-setup-minibuffer t) 
	:config (evil-collection-init))
   #+END_SRC
** redo for evil
   #+BEGIN_SRC emacs-lisp
	  (use-package undo-fu
     :straight t)
	  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
   #+END_SRC

** evil multiedit
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
  :after evil
  :ensure t
  :config 
   (evil-multiedit-default-keybinds)
   (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)
   (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
   (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)
   (define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  )
  ;  (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)
#+END_SRC
* Haskell Mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode (("\\.hs\\'" . haskell-mode) )
    :commands haskell-mode
  )
#+END_SRC
* Org mode
** org
   #+BEGIN_SRC emacs-lisp
     (use-package org
	:after org
	:hook (org-mode . misha/org-mode-setup))
     (setq org-ellipsis " ▾"
       org-hide-emphasis-markers t)
   #+END_SRC
** change the list style
   #+BEGIN_SRC emacs-lisp
     (font-lock-add-keywords 'org-mode
     '(("^ *\\([-]\\) "
     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   #+END_SRC
** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode))
   #+END_SRC

** center the text 
   #+BEGIN_SRC emacs-lisp
     (require 'olivetti)
     (setq olivetti-body-width 80)
     (add-hook 'org-mode-hook (lambda () (olivetti-mode 1)))  
   #+END_SRC
   
** make the list not collapse when open *doesnt work  
  #+BEGIN_SRC emacs-lisp
   (setq org-cycle-include-plain-lists 'children)
  #+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))
  
  ;https://github.com/jwiegley/use-package/blob/master/bind-key.el
  (bind-key [remap dired] 'dired-jump)
#+END_SRC

* UI
** remove the side borders
   #+BEGIN_SRC emacs-lisp
     (fringe-mode 0)
   #+END_SRC
** Simplify the UI
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (tooltip-mode -1)
     (fringe-mode 0)
   #+END_SRC
** show warnings only if its emergency
   #+BEGIN_SRC emacs-lisp
     (setq warning-minimum-level :emergency)
   #+END_SRC
** beacon (show where the cursor is)
#+BEGIN_SRC emacs-lisp
;  require('beacon)
;  (beacon-mode 1)
#+END_SRC
** Dont show startup message
   #+BEGIN_SRC emacs-lisp
     (setq byte-compile-warnings '(cl-functions))
     (setq inhibit-startup-message t)
   #+END_SRC
** tabs 
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
  :demand
  :config 
  (centaur-tabs-mode t)
  (setq centaur-tabs-set-bar 'over)
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-gray-out-icons 'buffer)
  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-modified-marker "")
  (setq centaur-tabs-enable-key-bindings t)
  :bind
   ("C-<iso-lefttab>" . centaur-tabs-backward)
   ("C-<tab>" . centaur-tabs-forward)
  :hook
   (dashboard-mode . centaur-tabs-local-mode)
   (term-mode . centaur-tabs-local-mode)
   (calendar-mode . centaur-tabs-local-mode)
   (org-agenda-mode . centaur-tabs-local-mode)

  )
#+END_SRC
** Disable the welcome screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :init 
  (progn
  (setq dashboard-startup-banner "~/.emacs.d/emacs.png")
  (setq dashboard-banner-logo-title "Welcome to the superior text editor")
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-heading-icons t)
  ;(dashboard-modify-heading-icons '((projects . "")))
  (setq dashboard-items '((recents . 7)
  (agenda . 5)
  (projects . 5)
  (bookmarks . 5)))
  )
  :config
  (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

#+END_SRC
** numberline 
** theme    
*** Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
*** inkPot
#+BEGIN_SRC emacs-lisp
  (use-package inkpot-theme
  :ensure t
  )
#+END_SRC
*** Ubuntu Terminal
#+BEGIN_SRC emacs-lisp
  (use-package ubuntu-theme
    :ensure t
  )
#+END_SRC
*** Load
   #+BEGIN_SRC emacs-lisp
     ;(load-theme 'doom-one t)
     (load-theme 'dracula t)
     ;(load-theme 'inkpot t)
     ;(load-theme 'ubuntu t)
   #+END_SRC
** vscode icons
   #+BEGIN_SRC emacs-lisp
     (use-package vscode-icon
       :ensure t
       :commands (vscode-icon-for-file))
   #+END_SRC
** sidebar   
   #+BEGIN_SRC emacs-lisp
     (use-package dired-sidebar
       :bind (("C-x n" . dired-sidebar-toggle-sidebar))
       :ensure t
       :commands (dired-sidebar-toggle-sidebar)
       :init
       (add-hook 'dired-sidebar-mode-hook
		 (lambda ()
		   (unless (file-remote-p default-directory)
		     (auto-revert-mode))))
       :config
       (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
       (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
     ;  (setq dired-sidebar-subtree-line-prefix "__")
       (setq dired-sidebar-theme 'vscode)
       (setq dired-sidebar-use-term-integration t)
       (setq dired-sidebar-use-custom-font t))

(column-number-mode)
(dolist (mode '(org-mode-hook
term-mode-hook
shell-mode-hook
eshell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

   #+END_SRC

*** sidebar cfg
    #+BEGIN_SRC emacs-lisp
      ;Sidebar cfg
(use-package dired-sidebar
  :bind (("C-x n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
;  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
    #+END_SRC

** all the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
;M-x all-the-icons-install-fonts
   #+END_SRC
** taskbar
*** powerline 
   #+BEGIN_SRC emacs-lisp
     ; (require 'powerline)
   #+END_SRC

   
*** doommodeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1))
    #+END_SRC

** Minimap
#+BEGIN_SRC emacs-lisp
  (use-package minimap
  :ensure t
  :bind (("C-x m" . minimap-create))
  :config
  (setq minimap-window-location 'right))
  ;;(add-hook 'web-mode-hook 'minimap-create)
  ;; changing colors
  (custom-set-faces
  '(minimap-active-region-background
    ((((background dark)) (:background "#2A2A2A222222"))
      (t (:background "#D3D3D3222222")))
    :group 'minimap))
  #+END_SRC
* JS 
** debugger
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode)

  #+END_SRC
** react snippets 
    #+BEGIN_SRC emacs-lisp
      (require 'yasnippet)
      (yas-global-mode 1)
	    ;(yas-reload-all)
	    ;(add-hook 'prog-mode-hook #'yas-minor-mode)
      (require 'react-snippets)

    #+END_SRC
** typescript 
   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
     :mode (("\\.tsx\\'" . typescript-mode)
     ("\\.ts\\'" . typescript-mode))
     :hook (typescript-mode . lsp-deferred)
     :config
     (require 'dap-node)
     (dap-node-setup)
     (setq typescript-indent-level 2))
   #+END_SRC
** rjsx 
#+BEGIN_SRC  emacs-lisp
  (use-package rjsx-mode
  :ensure t
  :mode (("\\.js\\'" . rjsx-mode)
	("\\.jsx\\'" . rjsx-mode)
	("\\.ts\\'" . rjsx-mode)
	("\\.tsx\\'" . rjsx-mode))
  )
#+END_SRC
** tide 
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-attr-value-indent-offset 2)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

  (use-package tide
  :ensure t
  :after (rjsx-mode company flycheck)
  :hook (rjsx-mode . setup-tide-mode))
#+END_SRC
* Core packages 
** lsp
   #+BEGIN_SRC emacs-lisp
     (setq lsp-log-io nil)
     (setq lsp-keymap-prefix "C-c l")
     (setq lsp-restart 'auto-restart)
     (setq lsp-ui-sideline-show-diagnostic t)
     (setq lsp-ui-sideline-show-hover t)
     (setq lsp-ui-sideline-show-code-actions t)
     (use-package lsp-mode
	:ensure t
	:hook (
	(web-mode . lsp-deferred)
	(lsp-mode . lsp-enable-which-key-integration)
	)
	:commands lsp-deferred)

      (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)

   #+END_SRC
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish
       :bind (("C-S" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done))
     :config
     (ivy-mode 1)
     )
     (use-package counsel
       :straight t
       :bind (("C-x C-f" . counsel-find-file)
     ("C-x b" . counsel-ibuffer)
     )
       :config (setq ivy-initial-inputs-alist nil)
     )
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-x g" . magit-status)
       :ensure t
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
       )
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (defun dw/switch-project-action ()
       (persp-switch (projectile-project-name))
       (magit-status))

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'helm))
       :bind-keymap
       ("C-x p" . projectile-command-map)
       :init
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :straight t
       :config (counsel-projectile-mode))
   #+END_SRC
** prisma mode
#+BEGIN_SRC emacs-lisp
  (require 'prisma-mode)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
#+END_SRC
** multi cursor
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :straight t
     )
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)

   #+END_SRC

** rainbow brakets
   #+BEGIN_SRC emacs-lisp
     (require 'rainbow-delimiters)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+END_SRC
** expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind
       ("C-a" . er/expand-region)
       ("C-S-a" . er/contract-region)
       )
   #+END_SRC
** json mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
  :ensure t)
#+END_SRC
** which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
	 (which-key-mode)
	 (setq which-key-idle-delay 0.4))
         (setq which-key-add-column-padding 10)
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (setq company-minimum-prefix-length 1
	   company-idle-delay 0.0)
     (use-package company
       :ensure t
       :config (global-company-mode t))
   #+END_SRC

** vterm 
   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :ensure t)
   #+END_SRC
* Web 
** webmode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :mode (("\\.js\\'" . web-mode)
	  ("\\.jsx\\'" . web-mode)
	  ("\\.ts\\'" . web-mode)
	      ("\\.tsx\\'" . web-mode)
	  ("\\.html\\'" . web-mode))
       :config
       (flycheck-add-mode 'javascript-eslint 'web-mode)
       :commands web-mode)
   #+END_SRC
*** web mode hook
    #+BEGIN_SRC emacs-lisp
	    (add-hook 'web-mode-hook  'emmet-mode)
	    (defun web-mode-init-hook ()
	      "Hooks for Web mode.  Adjust indent."
	      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      )
	    (add-hook 'web-mode-hook  'web-mode-init-hook)
	    (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
    #+END_SRC
** emmet mode
   #+BEGIN_SRC emacs-lisp
     (require 'emmet-mode)
     (add-hook 'sgml-mode-hook 'emmet-mode)
     (add-hook 'css-mode-hook  'emmet-mode)
   #+END_SRC
** jsx highlighting
   #+BEGIN_SRC emacs-lisp
      (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
   #+END_SRC
